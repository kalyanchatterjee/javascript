https://www.youtube.com/watch?v=Bv_5Zv5c-Ts

Lexical Environment:
Where something sits physically in the code you write

Execution Context:
A wrapper to help manage the code that is running.

Object:
A collection of name/value pairs (when talking about JavaScript) - THAT'S IT!!!

Global Object:
example: window. It is referred by "this" (at the global level, i.e. not inside a function)
In JS, a global object is something that is not inside a function

Global => Not Inside a function

Hoisting:
Setup Memory Space for Variables and Functions. Know the difference between how the memory space is setup for functions and variables. The funtion in its entireity is put in memory, a variable isn't.

undefined => A special value which means a variable hasn't been set
Not the same as "not defined"

The Execution Context:
=====================
Single threaded, synchronous execution

Invocation means just calling the function.

1) Global execution context is created anytime JavaScript is run
2) Attaches functions to it
3) Anytime you execute a function in JavaScript, a new execution context is created. This execution context is then placed on the execution stack.
4) When another function is invoked, it will create another execution context and add to the execution stack
5) REMEMBER - anytime a function is invoked (even if it calls itself), a new execution context is created and added to the execution stack

Variable Environment (1:10:00): 
1. Every execution context has its own variable environment which are distinct

The Scope Chain
-=============-
See scopechain.js 

let
---
- The variable is availbale only inside the block
- Block scoping

Asynchronous Callbacks
-====================-

Asynchronous = more than one at a time
Natively JS doesn't run asynchronously 

Diff between JavaScript and JavaScript Engine.
The JavaScript engine doesn't exist by itself and has other engines like the Rendering Engine, the HTTP Request Engine. 
The JavaScript engine has hooks which connect to other engines


Event Queue
-=========-
A click event for example. The Event Queue gets looked up by the JavaScript engine, when the execution stack is empty. So if it sees a click event, it creates the execution context for the clickHandler() function. Key thing to remember is that JavaScript engine won't look at the Event Queue, until the execution stack is empty.



Primitive Types - 6 in Total
-==========================-
Dynamic Typing - You don't need to declare the variable type, the type of the variable is determined during runtime. 
A single value, ie not an object

undefined (lack of existence) - shouldn't set a variable to this value
null - you can set a variable to this
boolean - true or false
number - Only one type - a floating point number
string - a sequence of characters, both ' and " can be used
symbol (ES6)



In-fix notation
===============
var a = 3 + 4;

Pre-fix notation
================
var a = +(3, 4); // '+' declared as a function

Coresion
=-=-=-=-
Obvious stuff. No notes.

Comparison Operators (C O N C E P T)
-==================-
console.log(1<2<3):
true

console.log(3<2<1)
true (?????)

Associativity rules apply (left to right):
3 < 2 = false

false < 1
- Here false is coerced to 0. 
Number(false) 
0

0 < 1 
true

Coersion can cause some unexpected results from a human perspective. 

It is not always obvious the coersion is going to be. For example, undefined and null won't coerce to the same Number.
Number(undefined)
NaN
Number(null)
0

How to avoid coersion errors? 
============================
== causes strange errors, that's, double equals
Use strict equality
1 == true
true
1 === true
false
Use === by default!!!!!













